/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export class ironboundActor extends Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    const flags = actorData.flags.ironbound || {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return {
      ...super.getRollData(),
      ...(this.system.getRollData?.() ?? null),
      "@powerDie": this.system.powerDie,
    };
  }

  activateListeners(html) {
    super.activateListeners(html);
  }

  async roll(type, pool, ap) {
    
    if (parseInt(ap) <= this.system.actionPoints || this.type == "vehicle") {
      let apLeft = this.system.actionPoints - parseInt(ap);
      const boons = this.system.currentBoons;
      const numberOfDice = Math.abs(boons) + 1;
      let criticalSuccess = false;
      let criticalFailure = false;
      let keepDice = "d12kh";
      if (boons < 0) {
        keepDice = "d12kl";
      }
      if (boons == 0) {
        keepDice = "d12";
      }
      const formula = numberOfDice + keepDice;
      const destinyDice = this.system.destinyDie;
      let roll = await new Roll(formula).evaluate();
      if (roll._total == 12) {
        criticalSuccess = true;
      }
      if (roll._total == 1) {
        criticalFailure = true;
      }
      let rollResults = "";
      const rollData = {
        rollHTML: await roll.render(),
        rollResults: rollResults,
        roll: roll._total,
        roll_type: type,
        actor: this._id,
        pool: pool,
        criticalSuccess,
        criticalFailure,
        destinyDice: destinyDice,
        formula: formula,
      };
      this.sendRolltoChat(rollData, roll, "regularRoll.hbs");
      if (apLeft >= 0) {
        this.update({ "system.actionPoints": apLeft });
      } else {
        this.update({ "system.actionPoints": 0 });
      }
    } else {
      let errorDialog = new game.ironbound.ironboundErrorDialog(
        this,
        "You do not have enough Action Points to use this"
      );
      errorDialog.render(true);
    }
    this.update({ "system.currentBoons": 0 });
  }

  changeFormula(formula) {
    let splitFormula = formula.split("+");
    let newForumla = "";
    splitFormula.forEach((part) => {
      let partSplit = [];
      if (part.includes("-")) {
        partSplit = part.split("-");
        partSplit.forEach((p, index) => {
          if (p.toLowerCase().includes("d")) {
            let diceNumbers = p.toLowerCase().split("d");
            diceNumbers[0] = parseInt(diceNumbers[0]) * 2;
            let newDice = diceNumbers[0] + "d" + diceNumbers[1];
            if (index !== 0) {
              newForumla = newForumla + "-" + newDice;
            } else {
              newForumla = newForumla + "+" + newDice;
            }
          } else {
            newForumla = newForumla + "-" + p;
          }
        });
      } else {
        if (part.toLowerCase().includes("d")) {
          let partSplit = part.toLowerCase().split("d");
          partSplit[0] = parseInt(partSplit[0]) * 2;
          newForumla = newForumla + "+" + partSplit[0] + "d" + partSplit[1];
        } else {
          newForumla = newForumla + "+" + part;
        }
      }
    });
    if (newForumla[0] === "+") {
      newForumla = newForumla.slice(1);
    }
    return newForumla;
  }

  async rollHeal(pool, formula, crit, powerdie) {
    let newFormula = formula;
    let pdie = false;
    let critdie = false;
    if (powerdie === "true") {
      newFormula = newFormula + "+" + this.system.powerDie;
      pdie = true;
    }
    if (crit === "true") {
      newFormula = this.changeFormula(newFormula);
      critdie = true;
    }
    newFormula = newFormula + "+" + this.system.damageBonus;
    let roll = await new Roll(newFormula, this.getRollData()).evaluate();
    let rollResults = "";
    const rollData = {
      ...this.getRollData(),
      rollHTML: await roll.render(),
      rollResults: rollResults,
      roll: roll._total,
      actor: this._id,
      pool: pool,
      formula: formula,
      powerdie: pdie,
      crit: critdie,
    };
    let cardContent = await renderTemplate(
      "systems/ironbound/templates/chat/healRoll.hbs",
      rollData
    );
    const chatOptions = {
      type: rollData.rollType,
      roll: roll,
      content: cardContent,
      speaker: ChatMessage.getSpeaker({ actor: this }),
    };
    ChatMessage.create(chatOptions);
  }

  async rollCrit() {
    const damageDialog = new game.ironbound.ironboundDamageDialog(this);
  }

  async rollDamage(pool, formula, crit, powerdie, weapon) {
    if(!weapon){
      weapon = ""
    }
    let newFormula = formula;
    let pdie = false;
    let critdie = false;
    if (powerdie === "true") {
      newFormula = newFormula + "+" + this.system.powerDie;
      pdie = true;
    }
    if (crit === "true") {
      newFormula = this.changeFormula(newFormula);
      critdie = true;
    }
    if (this.type != "vehicle") {
      newFormula = newFormula + "+" + this.system.damageBonus;
    }
    let roll = await new Roll(newFormula, this.getRollData()).evaluate();
    let rollResults = "";
    const rollData = {
      ...this.getRollData(),
      rollHTML: await roll.render(),
      rollResults: rollResults,
      roll: roll._total,
      actor: this._id,
      pool: pool,
      formula: formula,
      powerdie: pdie,
      crit: critdie,
      weapon: weapon,
    };

    console.log("roll data", rollData);
    let cardContent = await renderTemplate(
      "systems/ironbound/templates/chat/damageRoll.hbs",
      rollData
    );
    const chatOptions = {
      type: rollData.rollType,
      roll: roll,
      content: cardContent,
      speaker: ChatMessage.getSpeaker({ actor: this }),
    };

    ChatMessage.create(chatOptions);
  }

  async sendRolltoChat(rollData, roll, template) {
    let cardContent = await renderTemplate(
      `systems/ironbound/templates/chat/${template}`,
      rollData
    );
    const chatOptions = {
      type: rollData.rollType,
      roll: roll,
      content: cardContent,
      speaker: ChatMessage.getSpeaker({ actor: this }),
    };
    await game.dice3d.showForRoll(roll, game.user, true);
    ChatMessage.create(chatOptions);
  }

  async rollDestiny(formula, pool) {
    let current = this.system.destinyDie;
    if (current - 1 < 0) {
      current = 0;
    } else {
      current = current - 1;
    }
    if (current >= 0) {
      await this.update({ "system.destinyDie": current });
      let roll = await new Roll(formula).evaluate();
      let criticalSuccess = false;
      let criticalFailure = false;
      const destinyDice = this.system.destinyDie;
      let type = "Destiny";
      if (roll._total == 12) {
        criticalSuccess = true;
      }
      if (roll._total == 1) {
        criticalFailure = true;
      }
      let rollResults = "";
      const rollData = {
        rollHTML: await roll.render(),
        rollResults: rollResults,
        roll: roll._total,
        roll_type: type,
        actor: this._id,
        pool: pool,
        criticalSuccess,
        criticalFailure,
        destinyDice: destinyDice,
        formula: formula,
      };

      this.sendRolltoChat(rollData, roll, "regularRoll.hbs");
    }
  }

  async rollHealth(formula, pool) {
    let roll = await new Roll(formula).evaluate();
    let criticalSuccess = false;
    let criticalFailure = false;
    const destinyDice = this.system.destinyDie;
    let type = "Health Die ";
    if (roll._total == 12) {
      criticalSuccess = true;
    }
    if (roll._total == 1) {
      criticalFailure = true;
    }
    let rollResults = "";
    const rollData = {
      rollHTML: await roll.render(),
      rollResults: rollResults,
      roll: roll._total,
      roll_type: type,
      actor: this._id,
      pool: pool,
      criticalSuccess,
      criticalFailure,
      destinyDice: destinyDice,
      formula: formula,
    };

    this.sendRolltoChat(rollData, roll, "healthDieRoll.hbs");
  }

  async rollPower(formula, pool) {
    let roll = await new Roll(formula).evaluate();
    let criticalSuccess = false;
    let criticalFailure = false;
    const destinyDice = 0;
    let type = "Power Die ";
    if (roll._total == 12) {
      criticalSuccess = true;
    }
    if (roll._total == 1) {
      criticalFailure = true;
    }
    let rollResults = "";

    const rollData = {
      rollHTML: await roll.render(),
      rollResults: rollResults,
      roll: roll._total,
      roll_type: type,
      actor: this._id,
      pool: pool,
      criticalSuccess,
      criticalFailure,
      destinyDice: destinyDice,
      formula: formula,
      actor: this._id,
    };

    this.sendRolltoChat(rollData, roll, "powerDieRoll.hbs");
  }

  async addPoolPoints(pool, roll) {
    if (pool == "destiny") {
      return;
    }
    let points = this.system[pool.toLowerCase()].current;
    const pointDialog = new game.ironbound.ironboundAddPoolDialog(
      this,
      pool,
      roll,
      points
    );

    pointDialog.render(true);
  }

  async addPoolChat(pool, boost, newRoll) {
    let cardData = {
      pool,
      boost,
      newRoll,
    };
    let cardContent = await renderTemplate(
      `systems/ironbound/templates/chat/addedPoolPoints.hbs`,
      cardData
    );

    const chatOptions = {
      content: cardContent,
      speaker: ChatMessage.getSpeaker({ actor: this }),
    };
    ChatMessage.create(chatOptions);
  }

  async healthRestRoll(formula) {
    let healthRoll = await new Roll(formula).evaluate();
    const rollData = {
      rollHTML: await healthRoll.render(),
      roll: healthRoll._total,
      roll_type: "Health Rest Roll",
      actor: this._id,
      formula: formula,
    };
    this.sendRolltoChat(rollData, healthRoll, "healthRestRoll.hbs");

    return healthRoll._total;
  }

  async poolRestRoll(formula){
     let poolRoll = await new Roll(formula).evaluate();
     let poolAllocationDialog =
       new game.ironbound.ironboundPoolAllocationDialog(this, poolRoll._total);

    poolAllocationDialog.render(true)
  }

  /**
   * Convert the actor document to a plain object.
   *
   * The built in `toObject()` method will ignore derived data when using Data Models.
   * This additional method will instead use the spread operator to return a simplified
   * version of the data.
   *
   * @returns {object} Plain object either via deepClone or the spread operator.
   */
  toPlainObject() {
    const result = { ...this };

    // Simplify system data.
    result.system = this.system.toPlainObject();

    // Add items.
    result.items = this.items?.size > 0 ? this.items.contents : [];

    // Add effects.
    result.effects = this.effects?.size > 0 ? this.effects.contents : [];

    return result;
  }
}
